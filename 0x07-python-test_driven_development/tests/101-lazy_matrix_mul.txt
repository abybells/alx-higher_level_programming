The ``101-lazy_matrix_mul`` module
============================

Using ``lazy_matrix_mul``
---------------------

This is a text file in reStructuredText format. Refer to the
following documentation for details on proper guidelines:
https://docs.python.org/3/library/doctest.html
First import ``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

NOTE: Use the Python consol to produce the correct error messages
for this test suite, passing "import numpy" prior to using the console

Now use it:

Base case
----------

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])

Missing 1 argument
------------------

>>> lazy_matrix_mul([[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Too many arguments
------------------

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given

Num in element cases
--------------------

>>> lazy_matrix_mul([[1, 2], [-3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [ 9, 10]])

>>> lazy_matrix_mul([[1, 2], [1.1, 4]], [[1, 2], [3, 4]])
array([[ 7. , 10. ],
       [13.1, 18.2]])

>>> lazy_matrix_mul([[1, 2], [None, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'

>>> lazy_matrix_mul([[1, 2], ["a", 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, "2"], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([["1", 2], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, "2"], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4]], [["1", 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, "a"]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], ["a", 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, "a"]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: invalid data type for einsum

Element in matrix cases
-----------------------

>>> lazy_matrix_mul([[1, 2], "a"], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence

>>> lazy_matrix_mul([[1, 2], [3, 4]], ["a", [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence

>>> lazy_matrix_mul([[1, 2], [3, 4]], [None, [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'

>>> lazy_matrix_mul([[1, 2], [3, 4]], [1, [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence.

Empty elements and matrices
---------------------------

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[], []])
array([], shape=(2, 0), dtype=int64)

>>> lazy_matrix_mul([[], []], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (2,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[1, 2], []], [[], []])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[], []], [[], []])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (2,0) and (2,0) not aligned: 0 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[]], [[]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([], [])
False

>>> lazy_matrix_mul([])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Various matrice and element sizes
---------------------------------

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([[1, 2]], [[1, 2], [3, 4]])
array([[ 7, 10]])

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1]], [[3]])
array([[3]])

Non-list matrices and elements
------------------------------

>>> lazy_matrix_mul([[1, 2], [3, 4]], [(1, 2), [3, 4]])
array([[ 7, 10],
       [15, 22]])

>>> lazy_matrix_mul([[1, 2], [3, 4]], ([1, 2], [3, 4]))
array([[ 7, 10],
       [15, 22]])

>>> lazy_matrix_mul("a", ([1, 2], [3, 4]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
TypeError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[1, 2], [3, 4]], "a")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in lazy_matrix_mul
TypeError: Scalar operands are not allowed, use '*' instead
